// Code generated by go-swagger; DO NOT EDIT.

package webhook_delivery_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new webhook delivery item API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhook delivery item API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
WebhookDeliveryItemList lists the webhook delivery items of an app

List all the delivery items of an outgoing webhook of a Bitrise application
*/
func (a *Client) WebhookDeliveryItemList(params *WebhookDeliveryItemListParams, authInfo runtime.ClientAuthInfoWriter) (*WebhookDeliveryItemListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebhookDeliveryItemListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "webhook-delivery-item-list",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}/delivery-items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebhookDeliveryItemListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebhookDeliveryItemListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for webhook-delivery-item-list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebhookDeliveryItemRedeliver res deliver the webhook delivery items of an app

Re-deliver the delivery item of a specified webhook of a Bitrise application
*/
func (a *Client) WebhookDeliveryItemRedeliver(params *WebhookDeliveryItemRedeliverParams, authInfo runtime.ClientAuthInfoWriter) (*WebhookDeliveryItemRedeliverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebhookDeliveryItemRedeliverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "webhook-delivery-item-redeliver",
		Method:             "POST",
		PathPattern:        "/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}/delivery-items/{webhook-delivery-item-slug}/redeliver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebhookDeliveryItemRedeliverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebhookDeliveryItemRedeliverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for webhook-delivery-item-redeliver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WebhookDeliveryItemShow gets a specific delivery item of a webhook

Get the specified delivery item of an outgoing webhook of a Bitrise application
*/
func (a *Client) WebhookDeliveryItemShow(params *WebhookDeliveryItemShowParams, authInfo runtime.ClientAuthInfoWriter) (*WebhookDeliveryItemShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWebhookDeliveryItemShowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "webhook-delivery-item-show",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}/delivery-items/{webhook-delivery-item-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WebhookDeliveryItemShowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WebhookDeliveryItemShowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for webhook-delivery-item-show: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
